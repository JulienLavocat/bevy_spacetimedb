// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::galaxy_settings_type::GalaxySettings;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `galaxy_settings`.
///
/// Obtain a handle from the [`GalaxySettingsTableAccess::galaxy_settings`] method on [`super::RemoteTables`],
/// like `ctx.db.galaxy_settings()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.galaxy_settings().on_insert(...)`.
pub struct GalaxySettingsTableHandle<'ctx> {
    imp: __sdk::TableHandle<GalaxySettings>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `galaxy_settings`.
///
/// Implemented for [`super::RemoteTables`].
pub trait GalaxySettingsTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`GalaxySettingsTableHandle`], which mediates access to the table `galaxy_settings`.
    fn galaxy_settings(&self) -> GalaxySettingsTableHandle<'_>;
}

impl GalaxySettingsTableAccess for super::RemoteTables {
    fn galaxy_settings(&self) -> GalaxySettingsTableHandle<'_> {
        GalaxySettingsTableHandle {
            imp: self.imp.get_table::<GalaxySettings>("galaxy_settings"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct GalaxySettingsInsertCallbackId(__sdk::CallbackId);
pub struct GalaxySettingsDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for GalaxySettingsTableHandle<'ctx> {
    type Row = GalaxySettings;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = GalaxySettings> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = GalaxySettingsInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> GalaxySettingsInsertCallbackId {
        GalaxySettingsInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: GalaxySettingsInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = GalaxySettingsDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> GalaxySettingsDeleteCallbackId {
        GalaxySettingsDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: GalaxySettingsDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<GalaxySettings>("galaxy_settings");
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<GalaxySettings>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<GalaxySettings>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}
